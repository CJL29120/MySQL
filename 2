事务隔离：
  在MySQL中，事务支持是在引擎层实现的。
  MySQL原生的MyISAM引擎不支持事务。
  
  ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）;
  当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、
  幻读（phantom read）的问题，为了解决这些问题，就有了“隔离级别”的概念。
  
  事务隔离得越严实，效率就会越低。因此很多时候，要在二者之间寻找一个平衡点。
  SQL标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和
  串行化（serializable ）。
  解释：
  *读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。
  *读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。
  *可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。
    当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。
  *串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，
    后访问的事务必须等前一个事务执行完成，才能继续执行。
    
   *读未提交：别人改数据的事务尚未提交，我在我的事务中也能读到。
   *读已提交：别人改数据的事务已经提交，我在我的事务中才能读到。
   *可重复读：别人改数据的事务已经提交，我在我的事务中也不去读。
   *串行：我的事务尚未提交，别人就别想改数据。
   这4种隔离级别，并行性能依次降低，安全性依次提高。
   
  在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。
    *在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。
    *在“读提交”隔离级别下，这个视图是在每个SQL语句开始执行的时候创建的。
    *这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；
    *而“串行化”隔离级别下直接用加锁的方式来避免并行访问。
  
    不同隔离级别ReadView实现方式
    1. read-commited:
      即：在每次语句执行的过程中，都关闭read_view, 重新在row_search_for_mysql函数中创建当前的一份read_view。
      这样就会产生不可重复读现象发生。

    2. repeatable read：
      在repeatable read的隔离级别下，创建事务trx结构的时候，就生成了当前的global read view。
      使用trx_assign_read_view函数创建，一直维持到事务结束。在事务结束这段时间内 每一次查询都不会重新重建Read View ，
      从而实现了可重复读。

****************************************************************************************************
  Oracle数据库的默认隔离级别其实就是“读提交”，因此对于一些从Oracle迁移到MySQL的应用，为保证数据库隔离级别的一致，
  一定要记得将MySQL的隔离级别设置为“读提交”。
  
  什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。
    假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，
    也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，
    即使有用户发生了一笔新的交易，也不影响你的校对结果。
    这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。
    
  事务启动方式有以下几种：
    *显式启动事务语句， begin 或 start transaction。配套的提交语句是commit，回滚语句是rollback。
    *set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个select语句，这个事务就启动了，
      而且并不会自动提交。这个事务持续存在直到你主动执行commit 或 rollback 语句，或者断开连接。
    
  为什么建议你尽量不要使用长事务。
    *长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，
      数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。
    *除此之外，长事务还占用锁资源，可能会拖垮库。
  
  尝试回答这些问题检查自己的掌握程度:
    1.事务的概念是什么?
    2.mysql的事务隔离级别读未提交, 读已提交, 可重复读, 串行各是什么意思?
    3.读已提交, 可重复读是怎么通过视图构建实现的?
    4.可重复读的使用场景举例? 对账的时候应该很有用?
    5.事务隔离是怎么通过read-view(读视图)实现的?
    6.并发版本控制(MCVV)的概念是什么, 是怎么实现的?
    7.使用长事务的弊病? 为什么使用常事务可能拖垮整个库?
    8.事务的启动方式有哪几种? 
    9.commit work and chain的语法是做什么用的? 
    10.怎么查询各个表中的长事务?
    11.如何避免长事务的出现?
  
  索引上：
    索引的常见模型：介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。
      哈希表：
        哈希表是一种以键-值（key-value）存储数据的结构，我们只要输入待查找的值即key，就可以找到其对应的值即Value。
          哈希的思路很简单，把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这个位置。
        
        不可避免地，多个key值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。

        数组存放的索引对应的key值并不是递增的，这样做的好处是增加value数据时速度会很快，只需要往后追加。但缺点是，
          因为不是有序的，所以哈希索引做区间查询的速度是很慢的。
        
        所以，哈希表这种结构适用于只有等值查询的场景，比如Memcached及其他一些NoSQL引擎。

      有序数组:
        有序数组在等值查询和范围查询场景中的性能就都非常优秀。
        通过二分法就可以快速得到存在数组里的数据。
        
        如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，
          你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。
          
      搜索树：
            树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。
         二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，
         还要写到磁盘上。
            你可以想象一下一棵100万节点的平衡二叉树，树高20。一次查询可能需要访问20个数据块。在机械硬盘时代，
         从磁盘随机读一个数据块需要10 ms左右的寻址时间。也就是说，对于一个100万行的表，如果使用二叉树来存储，
         单独访问一个行可能需要20个10 ms的时间，这个查询可真够慢的。
            为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，
         而是要使用“N叉”树。这里，“N叉”树中的“N”取决于数据块的大小。
            以InnoDB的一个整数字段索引为例，这个N差不多是1200。这棵树高是4的时候，就可以存1200的3次方个值，
         这已经17亿了。考虑到树根的数据块总是在内存中的，一个10亿行的表上一个整数字段的索引，
            查找一个值最多只需要访问3次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。
            N叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。
      
      你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，
        这样才能从理论上分析出这个数据库的适用场景。
      
    根据叶子节点的内容，索引类型分为主键索引和非主键索引。
      *主键索引的叶子节点存的是整行数据。在InnoDB里，主键索引也被称为聚簇索引（clustered index）。
      *非主键索引的叶子节点内容是主键的值。在InnoDB里，非主键索引也被称为二级索引（secondary index）。
    根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？
      如果语句是select * from T where ID=500，即主键查询方式，则只需要搜索ID这棵B+树；
      如果语句是select * from T where k=5，即普通索引查询方式，则需要先搜索k索引树，得到ID的值为500，再到ID索引树搜索一次。
        这个过程称为回表。
      ****也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。***
    *******************************************************************************************************
        数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。
    而锁就是用来实现这些访问规则的重要数据结构。
    
    全局锁：命令是 Flush tables with read lock (FTWRL)。
        全局锁就是对整个数据库实例加锁。MySQL提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。
    当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、
    数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。
    
        全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都select出来存成文本。
        注意，在备份过程中整个库完全处于只读状态。
           *如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；
           *如果你在从库上备份，那么备份期间从库不能执行主库同步过来的binlog，会导致主从延迟。
        一个操作涉及两个表更新，如果没有锁，在第一个表操作后，进行备份。那备份数据就是不完整的。
        
        业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，
    你要对里面任何一个表做加字段操作，都是会被锁住的。
        
    表级锁：
        MySQL里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。
        *表锁的语法是 lock tables … read/write。
            *在某个线程A中执行lock tables t1 read, t2 write; 
            1.这个语句，则 其他线程 写t1、读写t2的语句都会被阻塞。
            2.同时，线程A在执行unlock tables之前，也只能执行读t1、读写t2的操作。连写t1都不允许，自然也不能访问其他表。
        
        *另一类表级的锁是MDL（metadata lock)。
            MDL不需要显式使用，在访问一个表的时候会被自动加上。MDL的作用是，保证读写的正确性。你可以想象一下，
          如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，
          那么查询线程拿到的结果跟表结构对不上，肯定是不行的。
            在MySQL 5.5版本中引入了MDL，当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。
              1.MDL读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。
              2.MDL读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，
                其中一个要等另一个执行完才能开始执行。
        给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，一定要特别小心。
        
        如何安全地给小表加字段？
          首先我们要解决长事务，事务不提交，就会一直占着MDL锁。在MySQL的information_schema 库的 innodb_trx 表中，
          你可以查到当前执行中的事务。如果你要做DDL变更的表刚好有长事务在执行，要考虑先暂停DDL，或者kill掉这个长事务。
        
  表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有lock tables这样的语句，你需要追查一下，
    比较可能的情况是：
    1.要么是你的系统现在还在用MyISAM这类不支持事务的引擎，那要安排升级换引擎；
    2.要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，
      最后业务开发就是把lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。
    
  MDL会直到事务提交才释放，在做表结构变更的时候，一定要小心，不要导致锁住线上查询和更新。
